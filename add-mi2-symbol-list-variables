Description: add '-symbol-list-variables' command to MI2 interface 
 allow to get list of global/static variables through GDB/MI.
 gdb (7.4-1~cvs20111117.2.1) experimental; urgency=low
 .
   * add MI2 -symbol-list-variables
Author: MINAMI Hirokazu <minami@pylone.jp>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: http://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: <YYYY-MM-DD>

--- gdb-7.4.orig/gdb/mi/mi-cmds.h
+++ gdb-7.4/gdb/mi/mi-cmds.h
@@ -85,6 +85,7 @@ extern mi_cmd_argv_ftype mi_cmd_stack_li
 extern mi_cmd_argv_ftype mi_cmd_stack_list_variables;
 extern mi_cmd_argv_ftype mi_cmd_stack_select_frame;
 extern mi_cmd_argv_ftype mi_cmd_symbol_list_lines;
+extern mi_cmd_argv_ftype mi_cmd_symbol_list_variables;
 extern mi_cmd_argv_ftype mi_cmd_target_detach;
 extern mi_cmd_argv_ftype mi_cmd_target_file_get;
 extern mi_cmd_argv_ftype mi_cmd_target_file_put;
--- gdb-7.4.orig/gdb/mi/mi-cmds.c
+++ gdb-7.4/gdb/mi/mi-cmds.c
@@ -103,6 +103,7 @@ struct mi_cmd mi_cmds[] =
   { "stack-list-variables", { NULL, 0 }, mi_cmd_stack_list_variables},
   { "stack-select-frame", { NULL, 0 }, mi_cmd_stack_select_frame},
   { "symbol-list-lines", { NULL, 0 }, mi_cmd_symbol_list_lines},
+  { "symbol-list-variables", { NULL, 0 }, mi_cmd_symbol_list_variables},
   { "target-attach", { "attach", 1 }, NULL },
   { "target-detach", { NULL, 0 }, mi_cmd_target_detach },
   { "target-disconnect", { "disconnect", 0 }, 0 },
--- gdb-7.4.orig/gdb/mi/mi-symbol-cmds.c
+++ gdb-7.4/gdb/mi/mi-symbol-cmds.c
@@ -21,6 +21,9 @@
 #include "mi-cmds.h"
 #include "symtab.h"
 #include "objfiles.h"
+#include "language.h"
+#include "block.h"
+#include "bfd.h"
 #include "ui-out.h"
 
 /* SYMBOL-LIST-LINES:
@@ -66,3 +69,99 @@ mi_cmd_symbol_list_lines (char *command,
 
   do_cleanups (cleanup_stack);
 }
+
+/* SYMBOL-LIST-VARIABLES:
+
+   Print the list of global and static variables. */
+
+void
+mi_cmd_symbol_list_variables (char *command, char **argv, int argc)
+{
+  char *regexp;
+  struct symbol_search *symbols;
+  struct symbol_search *p;
+
+  struct cleanup *cleanup_symbols, *cleanup_stack;
+  struct ui_out *uiout = current_uiout;
+
+  if (argc > 1)
+    error (_("-symbol-list-variables: Usage: REGEXP"));
+  else if (argc > 0){
+    regexp = argv[0];
+    ui_out_field_string (uiout, "regexp", regexp);
+  } else {
+    regexp = NULL;
+  }
+
+  search_symbols (regexp, VARIABLES_DOMAIN, 0,
+                  (char **) NULL, &symbols);
+  ui_out_field_string (uiout, "domain", "variables");
+  cleanup_symbols = make_cleanup_free_search_symbols (symbols);
+  cleanup_stack = make_cleanup_ui_out_list_begin_end (uiout, "symbols");
+
+  for (p = symbols; p; p = p->next)
+  {
+    if (p->msymbol){
+      /* skip non-global static variables */
+    } else if ( (p->symtab) && (p->symbol) ){
+      struct cleanup *cleanup_tuple;
+      cleanup_tuple = make_cleanup_ui_out_tuple_begin_end (uiout, NULL);
+
+      /* distinguish static/global */
+      ui_out_field_string (uiout, "scope",
+                           (p->block == STATIC_BLOCK) ? "static":"global");
+
+      ui_out_field_string (uiout, "language",
+                           language_str(SYMBOL_LANGUAGE(p->symbol)));
+
+      switch (SYMBOL_CLASS (p->symbol))
+      {
+      case LOC_CONST:
+        ui_out_field_string (uiout, "loc", "const");
+        ui_out_field_int (uiout, "const_value", SYMBOL_VALUE (p->symbol));
+        break;
+      case LOC_STATIC:
+        ui_out_field_string (uiout, "loc", "static");
+        ui_out_field_core_addr (uiout, "address",
+                                get_objfile_arch (p->symtab->objfile),
+                                SYMBOL_VALUE_ADDRESS (p->symbol));
+        break;
+      case LOC_BLOCK:
+        ui_out_field_core_addr (uiout, "address",
+                                get_objfile_arch (p->symtab->objfile),
+                                SYMBOL_BLOCK_VALUE (p->symbol)->startaddr);
+        /* dump namespace for C++?*/
+        break;
+      case LOC_CONST_BYTES:
+        /* dump contents? (which might be too huge) */
+        break;
+      default:
+        break;
+      }
+
+      if (p->symtab->filename)
+      {
+        ui_out_field_string (uiout, "file", p->symtab->filename);
+        ui_out_field_int (uiout, "line", SYMBOL_LINE (p->symbol));
+      }
+
+      /* bfd section name */
+      if (SYMBOL_OBJ_SECTION(p->symbol) &&
+          SYMBOL_OBJ_SECTION(p->symbol)->the_bfd_section &&
+          SYMBOL_OBJ_SECTION(p->symbol)->the_bfd_section->name)
+      {
+          ui_out_field_string (uiout, "section",
+                               SYMBOL_OBJ_SECTION(p->symbol)->the_bfd_section->name);
+      }
+
+      ui_out_field_string (uiout, "name", SYMBOL_SEARCH_NAME (p->symbol));
+
+      /* to-do: add type info based on SYMBOL_TYPE (p->symbol)? */
+
+      do_cleanups (cleanup_tuple);
+    }
+  }
+  do_cleanups (cleanup_stack);
+  do_cleanups (cleanup_symbols);
+}
+
